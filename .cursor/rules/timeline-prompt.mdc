---
description: 
globs: 
alwaysApply: true
---
# NodeGraph智能Timeline自动生成系统

## 🎯 核心任务目标
对NodeGraph SO文件中的所有FlowEventNode节点，智能遍历和分析timeline描述信息，自动选择合适的clip2样式，**统一使用generate_combined_timeline**生成相应的timeline并填充回NodeGraph中。

##⚠️ 重要修改说明
**所有timeline统一使用generate_combined_timeline生成**
- 纯观察类动作使用 `camera_focus_only` 作为clip2样式
- 物体操作类动作根据操作类型选择对应的clip2样式
- 不再使用camera_closeup_animation，统一采用三段式组合timeline
- 这样可以保证所有timeline的一致性和可管理性

## 🏗️ Timeline创建架构说明

### TimelineManager统一管理
- **统一PlayableDirector**: 所有timeline共享一个TimelineManager物体上的PlayableDirector组件
- **自动创建机制**: 如果场景中不存在名为"TimelineManager"的物体，系统会自动创建：
  - 创建空GameObject命名为"TimelineManager"
  - 添加PlayableDirector组件
  - 添加TimelineManager.cs脚本（路径：Assets/NodeGraphTool/Runtime/Manager）
  - 设置参数：目标timeline为当前PlayableDirector，是否需要实例化为true
- **复用机制**: 如果已存在TimelineManager，直接使用其PlayableDirector组件进行timeline创建

### Timeline绑定管理
- **绑定注册系统**: 每个创建的Timeline都会自动注册其轨道与物体的绑定关系到TimelineManager的PlayableDirector
- **自动组件添加**: 系统会自动为需要的物体添加Animator组件
- **绑定信息记录**: 创建结果中包含详细的绑定信息，格式为"轨道名 -> 物体名"
- **Timeline复制机制**: TimelineManager.cs中的ResetTimelineBinding方法会在播放时将绑定复制到临时的PlayableDirector

## 💡 智能Timeline生成策略

### 核心判断规则
基于NodeGraph中四个关键字段的分析进行智能选择：
- **相机timeline名称** (camera_timeline_name)
- **相机timeline内容** (camera_timeline_content)  
- **物体timeline名称** (object_timeline_name)
- **物体timeline内容** (object_timeline_content)

### **统一生成方式：generate_combined_timeline**
```
所有节点统一使用 generate_combined_timeline 生成三段式组合timeline

判断规则：
- 如果物体timeline为空或包含跳过关键词 → clip2样式使用 "camera_focus_only"
- 如果物体timeline不为空且有具体内容 → 根据内容选择对应的clip2样式

特点：
- Clip1: 相机从当前位置移动到目标物体位置
- Clip2: 执行对应的动作（纯观察或物体操作）
- Clip3: 相机从操作位置返回到原始位置
- 三个clip无缝衔接，形成完整的操作流程
- 统一的timeline结构，便于管理和维护
```

## 🎬 Clip2样式智能选择系统

### 基于物体timeline内容的样式匹配

当使用generate_combined_timeline时，系统会根据"物体timeline内容"的描述自动选择最合适的clip2样式。

**⚠️ 重要原则**: 如果物体timeline内容描述不明确或为空，**默认使用camera_focus_only进行纯观察**。

#### **纯相机聚焦 - camera_focus_only**
```
关键词匹配：
- "观察"、"查看"、"检查"、"观看"、"focus"
- "聚焦"、"特写"、"close-up"
- 物体timeline为空或包含跳过关键词
- 无具体物体操作描述

应用场景：
- 纯观察类动作
- 检查设备状态
- 课程介绍、总结类节点
- 无物体交互的聚焦

物体顺序要求：
目标物体作为聚焦对象
```

#### **倾倒液体类型 - pour_liquid**
```
关键词匹配：
- "倾倒"、"倒入"、"倒出"、"注入"、"pour"
- "液体"、"溶液"、"试剂"、"水"
- "从XX到YY"、"XX倒入YY"

应用场景：
- 比色皿倾倒到废液烧杯
- 试剂瓶倒入比色皿
- 任何液体转移操作

物体顺序要求：
第一个物体：需要倾倒的容器（主动物体）
其他物体：接收液体的容器（目标物体）
```

#### **插入连接类型 - insert_power_cable**
```
关键词匹配：
- "插入"、"连接"、"接入"、"insert"、"connect"
- "电源线"、"电缆"、"插头"、"线缆"
- "插到XX"、"连接到XX"

应用场景：
- 电源线插入设备
- 连接线缆到仪器
- 任何插入式连接操作

物体顺序要求：
第一个物体：需要插入的线缆（主动物体）
其他物体：被插入的设备（目标物体）
```

#### **物体移入类型 - move_object_into**
```
关键词匹配：
- "放入"、"移入"、"装入"、"置入"、"move into"
- "放到XX中"、"移动到XX"、"装进XX"

应用场景：
- 比色皿放入样品室
- 物品装入容器
- 任何物体移入操作

物体顺序要求：
第一个物体：需要移动的物体（主动物体）
其他物体：目标容器或位置（目标物体）
```

#### **穿戴操作类型 - wear_gloves**
```
关键词匹配：
- "穿戴"、"戴上"、"戴"、"wear"、"put on"
- "手套"、"gloves"、"防护用品"

应用场景：
- 戴手套
- 穿戴防护设备
- 任何穿戴类操作

物体顺序要求：
通常只涉及单个物体（手套）
```

#### **书写记录类型 - notebook_writing**
```
关键词匹配：
- "书写"、"记录"、"填写"、"写"、"writing"
- "笔记本"、"记录本"、"表格"、"notebook"
- "记录数据"、"填写信息"

应用场景：
- 实验数据记录
- 笔记本书写
- 任何记录类操作

物体顺序要求：
通常只涉及单个物体（笔记本）
```

#### **按压操作类型 - default_bounce_animation**
```
关键词匹配：
- "按下"、"按压"、"点击"、"press"、"click"
- "按钮"、"开关"、"button"、"switch"
- "启动"、"开启"、"关闭"

应用场景：
- 按下设备按钮
- 操作开关
- 明确的按压类操作

物体顺序要求：
通常只涉及单个物体（按钮所在的设备）
```

## 📋 详细执行流程（逐个节点循环处理）

### 第一步：初始化基础环境
```
使用以下MCP函数获取基础环境信息：
1. find_camera_objects() 
   # 获取场景中的相机对象

2. get_all_scene_objects() 
   # 获取所有可用物体

物体查找规则：
- Main Camera：直接在场景根目录下
- 所有实验物体：存放在GameObjectRoot物体下作为子物体
- 查找物体时需要在GameObjectRoot下搜索（除相机外）
```

### 第二步：获取所有节点名称列表
```
使用以下MCP函数获取节点名称：
get_flow_event_node_names(name="NodeGraphName", path="NodeGraphPath") 
# 返回所有FlowEventNode节点名称的列表
```

### 第三步：逐个节点循环处理
```
针对每个节点名称，执行以下完整的处理循环：

FOR EACH 节点名称 IN 节点名称列表:
    
    步骤3.1：获取当前节点的详细信息
    使用 get_flow_event_node_by_name(name="NodeGraphName", event_name="当前节点名称")
    提取四个关键字段：
    - camera_timeline_name （相机timeline名称）
    - camera_timeline_content （相机timeline内容）
    - object_timeline_name （物体timeline名称）
    - object_timeline_content （物体timeline内容）
    
    步骤3.2：立即执行智能判断逻辑
    检查 object_timeline_name 和 object_timeline_content：
    - 如果为空或包含跳过关键词 → clip2样式选择 "camera_focus_only"
    - 如果不为空且有具体内容 → 根据内容选择对应的clip2样式
    
    步骤3.3：立即生成对应的timeline
    统一调用 generate_combined_timeline 生成三段式组合timeline
    
    步骤3.4：立即关联timeline到当前节点
    调用timeline关联函数，将生成的timeline资产关联到当前节点
    
    步骤3.5：记录当前节点处理结果
    记录成功/失败状态，timeline资产路径，错误信息等
    
END FOR

# 所有节点处理完成后，统一保存NodeGraph
```

### 第四步：智能判断与生成（单节点处理）

#### **判断逻辑流程图（单节点）**
```
开始处理当前节点
    ↓
获取节点详细信息 (get_flow_event_node_by_name)
    ↓
提取四个timeline字段
    ↓
检查 object_timeline_name 和 object_timeline_content
    ↓
┌─────────────────┬─────────────────┐
│  物体timeline为空  │  物体timeline不为空  │
│  或包含跳过关键词   │  且有具体描述内容   │
└─────────────────┴─────────────────┘
    ↓                     ↓
clip2样式选择           根据内容关键词匹配
"camera_focus_only"     选择对应的clip2样式
    ↓                     ↓
┌─────────────────────────────────────┐
│    统一使用 generate_combined_timeline    │
│         生成三段式组合timeline          │
│                                   │
│ 1.分析相机timeline和物体timeline      │
│ 2.选择对应的clip2样式              │
│ 3.立即生成timeline                │
│ 4.立即关联到节点                   │
│ 5.记录处理结果                     │
└─────────────────────────────────────┘
    ↓
继续处理下一个节点
```

#### **统一生成调用（单节点）**

**所有节点统一使用generate_combined_timeline：**
```python
# 所有节点都使用此方式生成timeline
generate_combined_timeline(
    timeline_name="当前节点名称_组合动画",
    target_object_name="物体名称,相关物体名称",  # 主动物体在前
    clip2_function_name="根据当前节点物体timeline内容选择的clip2样式",
    interaction_objects=["物体1", "物体2", ...],  # 从当前节点描述中提取
    camera_name="Main Camera",
    clip_duration=5,  # 根据动画复杂度调整
    operation_object_name="主操作物体名称",
    enable_smart_positioning=True,
    desk_object_name="实验桌",
    fov=45,
    pitch_angle=35,
    padding=1.2,
    force_reset_rotation_y=True,
    timeline_folder="Assets/{课程名称}/Timeline"
)
```

### 第五步：物体识别与参数处理（单节点）

#### **目标物体智能识别**
```
从当前节点的timeline内容描述中提取物体名称：

1. 正则表达式匹配模式：
   - 中文物体名称：[\u4e00-\u9fa5]+
   - 英文物体名称：[A-Za-z][A-Za-z0-9_]*
   - 数字编号：\d+

2. 场景物体查找：
   - 使用 find_objects_by_name_pattern() 进行模糊匹配
   - 相机类物体：在场景根目录下查找
   - 实验物体：在GameObjectRoot下查找所有子物体
   - 支持中英文物体名称混合识别

3. 物体顺序处理：
   - 对于需要交互的timeline，确保主动物体在前
   - 被动物体（目标、容器）在后
   - 保持物体操作的逻辑顺序
```

#### **Clip2样式自动选择**
```python
def select_clip2_style(object_timeline_content):
    """
    根据当前节点的物体timeline内容自动选择clip2样式
    """
    content = object_timeline_content.lower()
    
    # 如果物体timeline为空或包含跳过关键词，直接返回camera_focus_only
    if not content or any(keyword in content for keyword in 
                         ["-", "无", "空", "null", "none", "跳过", "", " "]):
        return "camera_focus_only"
    
    # 倾倒液体类型
    if any(keyword in content for keyword in 
           ["倾倒", "倒入", "倒出", "注入", "pour", "液体", "溶液"]):
        return "pour_liquid"
    
    # 插入连接类型  
    elif any(keyword in content for keyword in 
             ["插入", "连接", "接入", "insert", "connect", "电源线", "插头"]):
        return "insert_power_cable"
    
    # 物体移入类型
    elif any(keyword in content for keyword in 
             ["放入", "移入", "装入", "置入", "move into"]):
        return "move_object_into"
    
    # 穿戴操作类型
    elif any(keyword in content for keyword in 
             ["穿戴", "戴上", "戴", "wear", "put on", "手套", "gloves"]):
        return "wear_gloves"
    
    # 书写记录类型
    elif any(keyword in content for keyword in 
             ["书写", "记录", "填写", "写", "writing", "笔记本", "notebook"]):
        return "notebook_writing"
    
    # 按压操作类型
    elif any(keyword in content for keyword in 
             ["按下", "按压", "点击", "press", "click", "按钮", "开关"]):
        return "default_bounce_animation"
    
    # 纯观察类型或无法识别的内容
    else:
        return "camera_focus_only"
```

### 第六步：Timeline关联与保存（逐个节点）

#### **Timeline资产关联（当前节点）**
```python
# 所有节点统一使用generate_combined_timeline生成的组合timeline
update_flow_event_node_timeline_assets(
    name="NodeGraphName",
    event_name="当前节点名称",
    camera_timeline_asset="Assets/Timeline/当前节点名称_组合动画.playable",
    object_timeline_asset=None  # 组合timeline只生成一个资产文件
)
```

#### **最终统一保存**
```python
# 所有节点处理完成后统一保存NodeGraph
save_nodegraph_changes(name="NodeGraphName", path="NodeGraphPath")
```

### 第七步：错误处理与日志（逐个节点）

#### **错误处理策略**
```
1. 当前节点信息获取失败：
   - 记录获取失败的节点名称
   - 跳过当前节点，继续处理下一个
   - 在最终报告中列出失败节点

2. 物体识别失败：
   - 尝试模糊匹配相似名称的物体
   - 使用默认目标物体（如"实验桌"）
   - 记录警告信息但继续执行当前节点

3. Clip2样式识别失败：
   - 使用默认的 "camera_focus_only"
   - 记录使用默认样式的原因

4. Timeline生成失败：
   - 记录详细错误信息
   - 跳过当前节点，继续处理下一个
   - 在最终报告中列出失败节点

5. 节点关联失败：
   - 记录关联失败的timeline资产路径
   - 继续处理下一个节点
```

#### **详细进度显示（逐个节点处理）**
```
=== NodeGraph智能Timeline自动生成（统一使用generate_combined_timeline） ===
目标NodeGraph: Example.asset
节点总数: 15个

=== 第一步：初始化环境 ===
✅ 获取相机对象: Main Camera
✅ 获取场景物体: 25个物体（其中实验物体：20个）

=== 第二步：获取节点列表 ===
✅ 获取所有FlowEventNode节点: 15个

=== 第三步：逐个节点循环处理 ===

[1/15] 开始处理节点: "检查器具齐全"
  ├─ 获取节点信息 ✅
  ├─ 相机timeline: "检查器具齐全_镜头" | 内容: "使用聚焦timeline格式..."
  ├─ 物体timeline: "" | 内容: ""
  ├─ 判断结果: 物体timeline为空 → clip2样式选择 "camera_focus_only"
  ├─ 目标物体: "实验桌"
  ├─ 生成timeline ✅ (generate_combined_timeline)
  ├─ 关联到节点 ✅
  └─ Timeline资产: "Assets/Timeline/检查器具齐全_组合动画.playable"

[2/15] 开始处理节点: "连接仪器电源"
  ├─ 获取节点信息 ✅
  ├─ 相机timeline: "连接仪器电源_镜头" | 内容: "镜头从当前点位出发..."
  ├─ 物体timeline: "连接仪器电源_电源线" | 内容: "电源线从目前点位平移到..."
  ├─ 判断结果: 物体timeline不为空 → clip2样式选择 "insert_power_cable"
  ├─ Clip2样式: insert_power_cable (检测到关键词: 电源线, 插入)
  ├─ 目标物体: "电源线,紫外可见光分光仪"
  ├─ 生成timeline ✅ (generate_combined_timeline)
  ├─ 关联到节点 ✅
  └─ Timeline资产: "Assets/Timeline/连接仪器电源_组合动画.playable"

[3/15] 开始处理节点: "按下电源按钮"
  ├─ 获取节点信息 ✅
  ├─ 相机timeline: "按下电源按钮_镜头" | 内容: "镜头从当前点位出发..."
  ├─ 物体timeline: "按下电源按钮_电源按钮" | 内容: "电源按钮向下按压2mm..."
  ├─ 判断结果: 物体timeline不为空 → clip2样式选择 "default_bounce_animation"
  ├─ Clip2样式: default_bounce_animation (检测到关键词: 按下, 按钮)
  ├─ 目标物体: "紫外可见光分光仪"
  ├─ 生成timeline ✅ (generate_combined_timeline)
  ├─ 关联到节点 ✅
  └─ Timeline资产: "Assets/Timeline/按下电源按钮_组合动画.playable"

...

[15/15] 开始处理节点: "完成实验"
  ├─ 获取节点信息 ✅
  ├─ 相机timeline: "完成实验_镜头" | 内容: "使用聚焦timeline格式..."
  ├─ 物体timeline: "" | 内容: ""
  ├─ 判断结果: 物体timeline为空 → clip2样式选择 "camera_focus_only"
  ├─ 目标物体: "实验台"
  ├─ 生成timeline ✅ (generate_combined_timeline)
  ├─ 关联到节点 ✅
  └─ Timeline资产: "Assets/Timeline/完成实验_组合动画.playable"

=== 第四步：统一保存NodeGraph ===
✅ 保存所有修改到NodeGraph

=== 生成统计报告 ===
总节点数: 15
成功处理: 15
跳过处理: 0
失败节点: 0

生成方式分布:
- generate_combined_timeline: 15个 (100%)

Clip2样式分布:
- camera_focus_only: 6个 (纯观察类)
- insert_power_cable: 1个
- default_bounce_animation: 4个
- move_object_into: 2个
- pour_liquid: 1个
- notebook_writing: 1个

所有Timeline已成功关联到NodeGraph并保存完成！
```

## 🔧 系统配置参数

### **默认配置**
```python
TIMELINE_CONFIG = {
    # 基础参数
    "camera_name": "Main Camera",
    "default_duration": 6.0,
    "default_clip_duration": 5.0,
    "move_to_start": True,
    "return_to_origin": True,
    
    # 相机参数
    "default_fov": 45,
    "default_pitch_angle": 35,
    "default_padding": 1.2,
    "force_reset_rotation_y": True,
    
    # 空值关键词
    "skip_keywords": ["-", "无", "空", "null", "none", "跳过", "", " "],
    
    # 场景结构
    "scene_structure": {
        "camera_parent": None,  # 相机在场景根目录
        "objects_parent": "GameObjectRoot",  # 实验物体在GameObjectRoot下
        "desk_object_name": "实验桌"
    },
    
    # Timeline管理器
    "timeline_manager": {
        "name": "TimelineManager",
        "script_path": "Assets/NodeGraphTool/Runtime/Manager/TimelineManager.cs",
        "auto_create": True
    },
    
    # 统一生成方式
    "unified_generation": {
        "method": "generate_combined_timeline",  # 统一使用此方法
        "default_clip2_style": "camera_focus_only"  # 默认clip2样式
    }
}
```

### **Clip2样式关键词配置**
```python
CLIP2_KEYWORDS = {
    "camera_focus_only": ["观察", "查看", "检查", "观看", "focus", "聚焦", "特写", "空", "无", "-"],
    "pour_liquid": ["倾倒", "倒入", "倒出", "注入", "pour", "液体", "溶液", "试剂"],
    "insert_power_cable": ["插入", "连接", "接入", "insert", "connect", "电源线", "插头", "线缆"],
    "move_object_into": ["放入", "移入", "装入", "置入", "move into", "放到", "装进"],
    "wear_gloves": ["穿戴", "戴上", "戴", "wear", "put on", "手套", "gloves"],
    "notebook_writing": ["书写", "记录", "填写", "写", "writing", "笔记本", "notebook", "记录本"],
    "default_bounce_animation": ["按下", "按压", "点击", "press", "click", "按钮", "开关", "button"]
}
```

## 🚀 完整执行指令

### **立即执行命令（统一使用generate_combined_timeline）**
```
请你作为AI助手，现在开始执行NodeGraph SO文件的智能Timeline自动生成工作。

目标NodeGraph：
- 名称："NodeGraphName" 
- 路径："NodeGraphPath"

执行规则（统一使用generate_combined_timeline）：
1. 初始化环境：获取相机对象和场景物体信息
2. 获取所有FlowEventNode节点名称列表
3. 对每个节点进行循环处理：
   a. 通过节点名称获取该节点的详细信息（四个timeline字段）
   b. 立即进行智能判断：根据物体timeline内容选择clip2样式
   c. 统一使用generate_combined_timeline生成三段式组合timeline
   d. 立即关联timeline到当前节点
   e. 记录当前节点的处理结果
4. 所有节点处理完成后，统一保存NodeGraph
5. 生成完整的统计报告

场景结构说明：
- 相机物体：在场景根目录下查找
- 实验物体：在GameObjectRoot物体下查找
- 系统会自动创建TimelineManager进行统一管理

请详细显示每个节点的处理过程，包括：
- 获取节点信息的结果
- 提取的四个timeline字段内容
- 判断逻辑和选择的clip2样式
- 识别的目标物体
- 生成结果和timeline资产路径
- 节点关联结果
- 错误信息（如有）

最后提供完整的统计报告。现在开始执行！
```

### **使用示例**
```
# 替换NodeGraphName和NodeGraphPath为实际值
请执行以下NodeGraph的智能Timeline生成（统一使用generate_combined_timeline）：

目标NodeGraph：
- 名称："紫外可见光光度计测量实验_v1.0_20241217"
- 路径："Assets/紫外可见光光度计测量实验"

立即开始逐个节点循环处理！
```

## 📋 总结

本系统实现了统一的Timeline生成流程：
1. **统一生成方式**：所有节点都使用generate_combined_timeline生成三段式组合timeline
2. **智能clip2选择**：根据物体timeline内容自动选择合适的clip2样式
3. **纯观察支持**：物体timeline为空时使用camera_focus_only实现纯观察效果
4. **一致性保证**：所有timeline具有相同的结构和管理方式
5. **灵活适配**：支持从纯观察到复杂物体操作的所有场景类型
6. **统一管理**：使用TimelineManager进行统一的timeline管理

通过这套统一的生成方式，可以确保所有timeline的一致性、可管理性和可扩展性。

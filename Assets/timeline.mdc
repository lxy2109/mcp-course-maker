---
description: 
globs: 
alwaysApply: false
---
# NodeGraph自动化Timeline生成完整提示词汇总

## 🎯 任务目标
对NodeGraph SO文件中的所有FlowEventNode节点，根据其自然语言描述自动生成相应的timeline，支持分离式和组合式两种生成方法。

## 🏗️ Timeline创建架构说明

### TimelineManager统一管理
- **统一PlayableDirector**: 所有timeline共享一个TimelineManager物体上的PlayableDirector组件，而不是为每个timeline创建单独的PlayableDirector
- **自动创建机制**: 如果场景中不存在名为"TimelineManager"的物体，系统会自动创建：
  - 创建空GameObject命名为"TimelineManager"
  - 添加PlayableDirector组件
  - 添加TimelineManager.cs脚本（路径：Assets/NodeGraphTool/Runtime/Manager）
  - 设置参数：目标timeline为当前PlayableDirector，是否需要实例化为true
- **复用机制**: 如果已存在TimelineManager，直接使用其PlayableDirector组件进行timeline创建

### Timeline绑定管理
- **绑定注册系统**: 每个创建的Timeline都会自动注册其轨道与物体的绑定关系到TimelineManager的PlayableDirector
- **自动组件添加**: 系统会自动为需要的物体添加Animator组件
- **绑定信息记录**: 创建结果中包含详细的绑定信息，格式为"轨道名 -> 物体名"
- **Timeline复制机制**: TimelineManager.cs中的ResetTimelineBinding方法会在播放时将绑定复制到临时的PlayableDirector

## 💡 生成方法说明

### 方式一：分离式Timeline生成
- 先根据镜头timeline名称和内容生成镜头的timeline
- 然后根据物品timeline名称和内容生成物品的timeline  
- 将两个timeline分别放入相应的FlowEventNode中
- 镜头timeline在前，物品timeline在后
- 例如：将镜头从默认位置移动到需要操作的物品前，再对物品实现移动的timeline

### 方式二：组合式Timeline生成
- 根据镜头timeline名称、镜头timeline内容、物品timeline名称、物体timeline内容四项内容
- 生成一个复杂的timeline，包含3个连续的clip：
  - **Clip 1**: 镜头从初始位置移动到物品前
  - **Clip 2**: 物品动画执行
  - **Clip 3**: 镜头从物品前移动回到初始位置
- 三个clip无缝衔接生成一个完整的timeline

## 📋 详细执行流程

### 第一步：准备工作
```
使用以下MCP函数获取基础信息：
- get_flow_event_node_names(name="Example", path="Assets/NodeGraphTool/Test") 
- find_camera_objects() 获取场景中的相机
- get_all_scene_objects() 获取所有可用物体

物体分布说明：
- Main Camera：直接在场景根目录下
- 所有实验物体：存放在GameObjectRoot物体下作为子物体
- 查找物体时需要在GameObjectRoot下搜索（除相机外）

系统会自动检查并创建TimelineManager：
- 搜索场景中名为"TimelineManager"的物体
- 如不存在，自动创建TimelineManager物体并配置相关组件
- 确保所有timeline使用统一的PlayableDirector进行管理
```

### 第二步：逐个处理FlowEventNode
对每个FlowEventNode执行以下步骤：

#### 2.1 读取节点信息
```
使用 get_flow_event_node_by_name(name="Example", event_name="节点名称")
提取以下4个字段：
- 镜头timeline名称 (camera_timeline_name)
- 镜头timeline内容 (camera_timeline_content)  
- 物品timeline名称 (object_timeline_name)
- 物体timeline内容 (object_timeline_content)
```

#### 2.2 智能选择生成方式

**判断条件：**
- 如果镜头内容和物体内容都有明确描述 → 优先使用**组合式**生成
- 如果只有一种内容有描述 → 使用**分离式**生成
- 如果内容为"-"、"无"、"空"等 → 跳过该timeline

**组合式适用场景：**
- 镜头需要聚焦到特定物体
- 需要连续的"镜头移动→物体操作→镜头复位"流程
- 描述中包含"聚焦"、"特写"、"操作"等关键词

**分离式适用场景：**
- 镜头和物体动画相对独立
- 需要分别控制两个timeline的播放时机
- 复杂的多段式动画序列

### 第三步：生成Timeline

#### 方式一：分离式生成
```
使用 generate_separate_timelines(
    camera_timeline_name="从节点提取的镜头timeline名称",
    camera_timeline_content="从节点提取的镜头timeline内容", 
    object_timeline_name="从节点提取的物品timeline名称",
    object_timeline_content="从节点提取的物体timeline内容",
    target_object_name="自动从描述中识别的目标物体",
    camera_name="Main Camera"
)
```

**分离式特点：**
- 生成两个独立的.playable文件
- 镜头timeline在前，物体timeline在后
- 支持独立播放和时间控制
- 适合复杂的多阶段动画

#### 方式二：组合式生成  
```
使用 generate_combined_timeline(
    timeline_name="组合timeline名称",
    camera_timeline_content="从节点提取的镜头timeline内容",
    object_timeline_content="从节点提取的物体timeline内容", 
    target_object_name="自动从描述中识别的目标物体",
    camera_name="Main Camera",
    clip_duration=智能计算的单个clip时长
)
```

**组合式特点：**
- 生成一个包含3个clip的完整timeline
- Clip1: 镜头移动到物体前（相机轨道）
- Clip2: 物体执行动画（物体轨道）  
- Clip3: 镜头返回初始位置（相机轨道）
- 三个clip无缝衔接，总时长=clip_duration×3

### 第四步：智能参数处理

#### 4.1 目标物体识别
```
从timeline内容中提取物体名称：
- 使用正则表达式匹配常见物体名称模式
- 使用 find_objects_by_name_pattern() 进行模糊匹配
- 相机类物体：在场景根目录下查找（如Main Camera）
- 实验物体：在GameObjectRoot下查找所有子物体
- 优先匹配场景中存在的物体
- 支持中英文物体名称
```

#### 4.2 动画类型智能识别
**镜头动画识别规则：**
- "环视"/"360度"/"旋转一周" → camera_panorama_animation
- "扫视"/"左右"/"摆动" → camera_sweep_animation  
- "特写"/"聚焦"/"拉近" → camera_closeup_animation
- "移动到"/"跟随" → create_multipoint_animation
- "围绕"/"环绕" → rotate_around_target_animation

**物体动画识别规则：**
- "移动"/"位移"/"运动" → create_multipoint_animation (多点路径)
- "围绕XX旋转"/"绕着XX" → rotate_around_target_animation
- "弹跳"/"上下"/"震动" → create_multipoint_animation (弹跳路径)
- "旋转"/"转动" → create_multipoint_animation (旋转动画)

#### 4.3 参数智能计算
```
duration参数设置：
- 简单动画(移动/旋转): 3-5秒
- 复杂动画(环视/特写): 8-12秒  
- 多段动画: 根据段数×基础时长

clip_duration参数设置(组合式)：
- 根据动画复杂度: 4-8秒
- 确保足够时间完成动作
- 考虑视觉观感的连贯性

其他参数：
- radius: 根据物体大小自动调整(2-8米)
- height: 根据视角需求自动调整(1-5米)  
- pitch_angle: 根据视角描述解析(-45°到+45°)
```

### 第五步：关联和保存

#### 5.1 Timeline资产关联
```
对每个成功生成的FlowEventNode：

分离式:
update_flow_event_node_timeline_assets(
    name="Example",
    event_name="节点名称", 
    camera_timeline_asset="Assets/Timeline/镜头timeline名称.playable",
    object_timeline_asset="Assets/Timeline/物体timeline名称.playable"
)

组合式:
update_flow_event_node_timeline_assets(
    name="Example", 
    event_name="节点名称",
    camera_timeline_asset="Assets/Timeline/组合timeline名称.playable",
    object_timeline_asset=null  # 组合式只需要一个timeline资产
)
```

#### 5.2 批量保存
```
处理完所有节点后：
save_nodegraph_changes(name="Example", path="Assets/NodeGraphTool/Test")
```

### 第六步：错误处理和日志

#### 6.1 错误处理策略
- 解析失败：记录错误信息，使用默认参数继续
- 物体不存在：尝试模糊匹配，失败则跳过  
- timeline生成失败：记录详细错误，继续下一个节点
- 关联失败：记录失败信息，不影响其他节点

#### 6.2 进度显示格式
```
=== NodeGraph Timeline自动化生成 ===
目标文件: Example.asset
节点总数: X个

[1/X] 处理节点: "节点名称"
  ├─ 镜头timeline: "名称" | 内容: "描述"
  ├─ 物体timeline: "名称" | 内容: "描述"  
  ├─ 生成方式: 组合式/分离式
  ├─ 目标物体: "物体名称"
  ├─ 生成结果: ✅成功 / ❌失败 (错误信息)
  └─ Timeline资产: "路径"

[2/X] 处理节点: ...
```

## 🔧 默认配置参数

```python
DEFAULT_CONFIG = {
    "camera_name": "Main Camera",
    "move_to_start": True,
    "return_to_origin": False,
    "default_duration": 5.0,
    "default_clip_duration": 6.0,
    "default_radius": 5.0,
    "default_height": 2.0,
    "default_pitch_angle": -10.0,
    "skip_keywords": ["-", "无", "空", "null", "none", "跳过"],
    "target_nodegraph": {
        "name": "Example", 
        "path": "Assets/NodeGraphTool/Test"
    },
    "timeline_manager": {
        "name": "TimelineManager",
        "script_path": "Assets/NodeGraphTool/Runtime/Manager/TimelineManager.cs",
        "need_instance": True,
        "auto_create": True
    },
    "scene_structure": {
        "camera_parent": None,  # 相机在场景根目录
        "objects_parent": "GameObjectRoot",  # 实验物体在GameObjectRoot下
        "search_in_children": True  # 在子物体中搜索
    }
}
```

## 🚀 执行命令集合

### **命令一：全自动模式（推荐）**
```
请全自动处理Example NodeGraph中的所有FlowEventNode，智能选择最合适的timeline生成方式，并显示完整的处理过程和结果统计。
```

### **命令二：逐步确认模式**
```
请先获取Example NodeGraph中的所有FlowEventNode列表，然后逐个分析并询问我是否要使用分离式还是组合式生成方法，最后执行生成和关联。
```

### **命令三：批量组合式模式**
```
请对Example NodeGraph中的所有FlowEventNode统一使用组合式timeline生成（generate_combined_timeline），每个timeline包含3个clip的完整流程。
```

### **命令四：批量分离式模式**
```
请对Example NodeGraph中的所有FlowEventNode统一使用分离式timeline生成（generate_separate_timelines），分别生成镜头timeline和物体timeline。
```

### **命令五：智能混合模式**
```
请对Example NodeGraph中的所有FlowEventNode进行智能分析：
- 包含聚焦、特写、操作场景的使用组合式生成
- 独立的镜头或物体动画使用分离式生成
- 显示每个节点的选择理由和生成结果
```

## 📊 完整执行指令

**立即执行提示词：**

```
请你作为AI助手，现在开始执行NodeGraph SO文件的自动化timeline生成工作。

目标文件：
- NodeGraph名称："Example" 
- 路径："Assets/NodeGraphTool/Test"

场景结构说明：
- Main Camera：位于场景根目录
- 所有实验物体：位于GameObjectRoot物体下
- Timeline创建时会自动在正确位置查找物体

执行步骤：

1. 首先获取所有FlowEventNode节点名称列表
2. 逐个处理每个节点，提取4种timeline信息
3. 智能分析内容并选择生成方式（分离式或组合式）
4. 自动生成相应的timeline动画（物体将在GameObjectRoot下查找）
5. 将生成的timeline关联回FlowEventNode
6. 保存所有修改

处理规则：
- 内容丰富且有聚焦物体 → 优先使用组合式（generate_combined_timeline）
- 内容相对独立 → 使用分离式（generate_separate_timelines）
- 内容为"-"或"无" → 跳过处理
- 相机类物体：在场景根目录查找
- 实验物体：在GameObjectRoot下查找
- 自动识别目标物体和动画类型
- 使用智能参数计算

请详细显示每个节点的处理过程，包括：
- 节点名称和提取的timeline信息
- 选择的生成方式和原因
- 解析的动画参数（注明物体查找位置）
- 生成结果和资产路径
- 错误信息（如有）

最后提供完整的处理统计报告。

现在开始执行！
```

## 🎯 使用说明

1. **选择执行模式**：从上述5个命令中选择一个最适合您需求的
2. **复制提示词**：将相应的命令复制到对话中
3. **监控执行**：观察每个节点的处理过程和结果
4. **检查结果**：查看生成的timeline资产和关联情况
5. **错误处理**：如有失败节点，可单独重新处理

**推荐使用"命令一：全自动模式"来获得最佳的智能化处理效果！**



/**
 * Convert 4 byte uint8 buffer to 3 channels float data
 * @param rgbe input uint8 buffer
 * @param float output float data
 */
declare function rgbe2float(rgbe: Uint8Array, float: Float32Array): void;
/**
 * Convert 3 channels float data to 4 byte uint8 buffer
 * @param float input float data
 * @param rgbe output uint8 buffer
 */
declare function float2rgbe(float: Float32Array, rgbe: Uint8Array): void;
/**
 * Write float data to RGBE(.hdr) file buffer
 * @param x image width
 * @param y image height
 * @param data float data, RGB 3 channels.
 * @returns file buffer
 */
declare function write_hdr(x: number, y: number, data: Float32Array): Uint8Array;
/**
 * Load a RGBE(.hdr) file from URL.
 * @param url the URL.
 * @returns The promise of the resolved data.
 */
declare function load(url: string): Promise<{
    width: number;
    height: number;
    rgbFloat: Float32Array;
}>;
/**
 * Save a hdr file to disk
 * @param float float data, RGB 3 channels.
 * @param width image width.
 * @param height image height.
 * @param filename file name.
 * @returns Whether the save was successful
 */
declare function save(float: Float32Array, width: number, height: number, filename: string): boolean;
/**
 * Read a RGBE(.hdr) file from buffer
 * @param uint8 RGBE(.hdr) file buffer
 * @returns Failure reason or resolved data.
 */
declare function read_hdr(uint8: Uint8Array): string | {
    rgbFloat: Float32Array;
    width: number;
    height: number;
};
declare const HDRjs: Readonly<{
    load: typeof load;
    save: typeof save;
    read: typeof read_hdr;
    write: typeof write_hdr;
    float2rgbe: typeof float2rgbe;
    rgbe2float: typeof rgbe2float;
}>;
export default HDRjs;
